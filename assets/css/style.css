/* General Body and Typography */
body {
    background: linear-gradient(to right, #6a11cb, #2575fc);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: #333;
}

/* Header */
header {
    padding: 2rem 1rem;
    color: white;
}

#logo-img {
    max-height: 60px;
    margin-bottom: 1rem;
}

header h1 {
    font-weight: 700;
}

/* Converter Wrapper */
.converter-wrapper {
    background-color: rgba(255, 255, 255, 0.9);
    padding: 2.5rem;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(10px);
}

/* Tab Navigation */
.nav-pills .nav-link {
    color: #0d6efd;
    font-weight: 500;
    padding: 0.75rem 1rem;
    border-radius: 8px;
    transition: all 0.3s ease;
}

.nav-pills .nav-link.active {
    background-color: #0d6efd;
    color: white;
    box-shadow: 0 4px 15px rgba(13, 110, 253, 0.4);
}

.nav-pills .nav-link:not(.active):hover {
    background-color: #e9f5ff;
}

/* Drop Zone */
.drop-zone {
    border: 2px dashed #0d6efd;
    border-radius: 10px;
    padding: 3rem;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
}

.drop-zone.dragover {
    background-color: #e9f5ff;
    border-style: solid;
    transform: scale(1.02);
}

.drop-zone-content .icon-lg {
    font-size: 4rem;
    color: #0d6efd;
    transition: transform 0.3s ease;
}

.drop-zone:hover .icon-lg {
    transform: scale(1.1);
}

.drop-zone p {
    margin-bottom: 0.5rem;
}

/* Preview and Controls */
.preview-controls-wrapper {
    margin-top: 2rem;
}

.preview-container {
    border: 1px solid #ddd;
    padding: 5px;
    background-color: #fff;
    max-height: 300px;
    object-fit: contain;
}

.controls-box {
    background-color: #f8f9fa;
    border: 1px solid #e9ecef;
}

/* Buttons */
.btn-primary {
    background-color: #0d6efd;
    border-color: #0d6efd;
    transition: all 0.3s ease;
}

.btn-primary:hover {
    background-color: #0a58ca;
    border-color: #0a58ca;
    transform: translateY(-2px);
}

.btn-success {
    transition: all 0.3s ease;
}

.btn-success:hover {
    transform: translateY(-2px);
}

/* Footer */
footer {
    color: rgba(255, 255, 255, 0.8);
}

/* Responsive Design */
@media (max-width: 768px) {
    .converter-wrapper {
        padding: 1.5rem;
    }

    .nav-pills .nav-link {
        padding: 0.5rem;
        font-size: 0.9rem;
    }

    .drop-zone {
        padding: 2rem;
    }
}

/* Video Service */
import ffmpeg from 'fluent-ffmpeg';
import path from 'path';

export class VideoService {
    async convertVideo(inputPath: string, outputFormat: string): Promise<string> {
        const outputPath = path.join(
            path.dirname(inputPath),
            `${path.basename(inputPath, path.extname(inputPath))}.${outputFormat}`
        );

        return new Promise((resolve, reject) => {
            ffmpeg(inputPath)
                .toFormat(outputFormat)
                .on('end', () => resolve(outputPath))
                .on('error', (err) => reject(err))
                .save(outputPath);
        });
    }
}

/* Video Controller */
import { Request, Response } from 'express';
import { VideoService } from '../services/videoService';

export class VideoController {
    private videoService: VideoService;

    constructor() {
        this.videoService = new VideoService();
    }

    async convertVideo(req: Request, res: Response) {
        try {
            if (!req.file) {
                return res.status(400).json({ error: 'Nenhum arquivo enviado' });
            }

            const outputFormat = req.body.format;
            const convertedPath = await this.videoService.convertVideo(
                req.file.path,
                outputFormat
            );

            res.download(convertedPath);
        } catch (error) {
            res.status(500).json({ error: 'Erro na conversão do vídeo' });
        }
    }
}

/* Video Routes */
import express from 'express';
import multer from 'multer';
import { VideoController } from '../controllers/videoController';

const router = express.Router();
const upload = multer({ dest: 'uploads/' });
const videoController = new VideoController();

router.post('/convert/video', 
    upload.single('video'), 
    (req, res) => videoController.convertVideo(req, res)
);

export default router;
